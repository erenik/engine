/// Emil Hedemalm
/// 2014-08-09
/// Particle effects

#include "ToolParticles.h"

#include "TextureManager.h"

#include "Graphics/GraphicsManager.h"
#include "Graphics/Messages/GraphicsMessage.h"

#include "Graphics/Camera/Camera.h"

#include "Graphics/FrameStatistics.h"

/// Particle system class for handling at least some of the particle effects generated by the player tools.
ToolParticleSystem::ToolParticleSystem()
: ParticleSystem("ToolParticleSystem", true)
{

    for(int i = 0; i < maxParticles; ++i)
	{
    //    velocities[i].x += sideVelocityRange * (rand()%201-100) * 0.01f;
    //    velocities[i].y += sideVelocityRange * (rand()%201-100) * 0.01f;
    //    velocities[i].z = primaryVelocity * (rand()%81 + 20) * 0.01f;
    //    lifeDuration[i] = maxLifeTime;
//		lifeTime[i] = maxLifeTime;
  //      colors[i] = color;
    }
    color = Vector4f(0.1f, 0.2f, 0.4f, 1.0f);

	livingParticles = 0;
}

ToolParticleSystem::~ToolParticleSystem()
{
	/*
	if (maxDistanceSquared)
		delete[] maxDistanceSquared;
	maxDistanceSquared = NULL;
	if (distanceTraveledSquared)
		delete[] distanceTraveledSquared;
	distanceTraveledSquared = NULL;
	if (scale)
		delete[] scale;
	scale = NULL;
	*/
}

/// Integrates all particles.
void ToolParticleSystem::ProcessParticles(float & timeInSeconds)
{
	Timer timer;
	timer.Start();
#ifdef USE_SSE
	__m128 sseTime = _mm_load1_ps(&timeInSeconds);
#endif
	/// Move/Process all alive particles
//	const Vector3f wind = weather->globalWind;
	for (int i = 0; i < aliveParticles; ++i)
	{
#ifdef SSE_PARTICLES
		positionsSSE[i].data = _mm_add_ps(positionsSSE[i].data, _mm_mul_ps(sseTime, velocitiesSSE[i].data));
#else // Not SSE_PARTICLES
		// Using SSE commands straight away reduced computation time to like 1 ms from 150ms when many particles were around (towards 500k somewhere)
#ifdef USE_SSE
		positions[i].data = _mm_add_ps(positions[i].data, _mm_mul_ps(sseTime, _mm_add_ps(velocities[i].data, weather->globalWind.data)));
#else
		positions[i] += (velocities[i] + weather->globalWind)* timeInSeconds;
#endif // USE_SSE
#endif // SSE_PARTICLES
	}
	timer.Stop();
	FrameStats.particleProcessingIntegrate += timer.GetMs();

	timer.Start();
	for (int i = 0; i < aliveParticles; ++i)
	{
#ifdef SSE_PARTICLES
		ldsSSE[i].y += timeInSeconds;	
#else // Not SSE_PARTICLES
		// No velocity decay.
		lifeDurations[i] += timeInSeconds;
#endif // SSE_PARTICLES
	}
	timer.Stop();
	FrameStats.particleProcessingOldify = timer.GetMs();


	timer.Start();
	for (int i = 0; i < aliveParticles; ++i)
	{
#ifdef SSE_PARTICLES
		if (ldsSSE[i].y > ldsSSE[i].x)
		{
			int lastIndex = aliveParticles - 1;
			positionsSSE[i] = positionsSSE[lastIndex];
			velocitiesSSE[i] = velocitiesSSE[lastIndex];
			colorsSSE[i] = colorsSSE[lastIndex];
			ldsSSE[i] = ldsSSE[lastIndex];
			// Decrement i so we don't skip processing of the one we moved back.
			--i;
			// Decrement alive particles.
			--aliveParticles;
		}			
#else // Not SSE_PARTICLES
			// If duration has elapsed life-time..
		if (lifeDurations[i] > lifeTimes[i])
		{
			int lastIndex = aliveParticles - 1;
			// Kill it, by moving in the last used data to replace it.
			positions[i] = positions[lastIndex];
			velocities[i] = velocities[lastIndex];
			lifeDurations[i] = lifeDurations[lastIndex];
			colors[i] = colors[lastIndex];
			lifeTimes[i] = lifeTimes[lastIndex];
			scales[i] = scales[lastIndex];

			// Decrement i so we don't skip processing of the one we moved back.
			--i;
			// Decrement alive particles.
			--aliveParticles;
		}
#endif
	}
	timer.Stop();
	FrameStats.particleProcessingRedead += timer.GetMs();
}


ToolParticleEmitter::ToolParticleEmitter()
: ParticleEmitter()
{
	emissionVelocity = 5.f;
	lifetime = 5.f;
	direction = Vector3f(1,0,0);
	scale = 1.f;
	particlesPerSecond = 500;
}

/// Default new particle.
bool ToolParticleEmitter::GetNewParticle(Vector3f & newPPos, Vector3f & velocity)
{
	// Emit randomly from around our position, toward the target position?
	velocity = direction * emissionVelocity;
	newPPos = this->position;
	return false;
}
/// Extended particle emission.
bool ToolParticleEmitter::GetNewParticle(Vector3f & position, Vector3f & velocity, float & newParticleScale, float & particleLifetime, Vector4f & particleColor)
{
	position = this->position;
	velocity = emissionVelocity * direction;
	particleLifetime = lifetime;
	particleColor = this->color;
	newParticleScale = scale;
	return true;
}


/// Stuff.

/*
bool ToolParticleEmitter::GetNewParticle(Vector3f & position, Vector3f & velocity, float & particleLifetime, Vector4f & particleColor, float & newParticleScale)
{
	position = this->position;
	velocity = particleVelocity * direction;
	particleLifetime = lifetime;
	particleColor = this->color;
	newParticleScale = particleScale;
	return true;
}
*/

/// sets positions and updates direction as well as max distance.
void ToolParticleEmitter::SetPositionAndTarget(ConstVec3fr startPosition, ConstVec3fr targetPos)
{
	position = startPosition;
	// Set target to be the target we're aiming at.
	targetPosition = targetPos;
	direction = (targetPosition - position).NormalizedCopy();
	float distance = (targetPosition - position).Length();
	lifetime = distance / emissionVelocity;
}